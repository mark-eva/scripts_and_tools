The shape of a plan

-- Build the environment 

-- Create the table

	create table t1
	as
	with generator as
	(
		select	--+ materialize
		rownum id 
		from dual 
		connect by 
		level <= 1e4
	)
	select
		rownum			id,
		mod(rownum,1000)	n_1000,
		lpad(rownum,6,'0')	v1,
		rpad('x',100,'x')	padding
	from generator;

-- Create primary key constraint on id
	alter table t1 add constraint t1_pk primary key(id);

-- Create index 
	create index t1_i1 on t1(n_1000);

	
-- Gather stats without creating histograms
	begin
		dbms_stats.gather_table_stats(
			ownname		 => user,
			tabname		 =>'T1',
			method_opt	 => 'for all columns size 1'
		);
	end;
/

-- Creating table 2

	create table t2
	as
	with generator as
	(
		select	--+ materialize
		rownum id 
		from dual 
		connect by 
		level <= 1e4
	)
	select
		rownum			id,
		mod(rownum,1000)	n_1000,
		lpad(rownum,6,'0')	v1,
		rpad('x',100,'x')	padding
	from generator;
	
	
-- Create primary key constraint on id
	alter table t2 add constraint t1_pk primary key(id);

-- Create index 
	create index t2_i1 on t2(n_1000);

	
Gather stats without creating histograms
	begin
		dbms_stats.gather_table_stats(
			ownname		 => user,
			tabname		 =>'T1',
			method_opt	 => 'for all columns size 1'
		);
	end;
/

-- Using explain plan on the first example

explain plan for 
select t1.v1
, t2.v1
from t1, t2
where t1.n_1000 = 1
and t2.id     = t1.id
and t2.n_1000 = 100
;

-- Display the plan 
	select * from table(dbms_xplan.display);
	
	example output:
	
	
	PLAN_TABLE_OUTPUT
	------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Plan hash value: 2635474524
	
	-----------------------------------------------------------------------------------------------
	| Id  | Operation                             | Name  | Rows  | Bytes | Cost (%CPU)| Time     |
	-----------------------------------------------------------------------------------------------
	|   0 | SELECT STATEMENT                      |       |    10 |   550 |    23   (0)| 00:00:01 |
	|   1 |  NESTED LOOPS                         |       |    10 |   550 |    23   (0)| 00:00:01 |
	|   2 |   NESTED LOOPS                        |       |    10 |   550 |    23   (0)| 00:00:01 |
	|   3 |    TABLE ACCESS BY INDEX ROWID BATCHED| T2    |    10 |   400 |    13   (0)| 00:00:01 |
	|*  4 |     INDEX RANGE SCAN                  | T2_I1 |    10 |       |     1   (0)| 00:00:01 |
	|*  5 |    INDEX UNIQUE SCAN                  | T1_PK |     1 |       |     0   (0)| 00:00:01 |
	|*  6 |   TABLE ACCESS BY INDEX ROWID         | T1    |     1 |    15 |     1   (0)| 00:00:01 |
	-----------------------------------------------------------------------------------------------
	
	Predicate Information (identified by operation id):
	---------------------------------------------------
	
	   4 - access("T2"."N_1000"=100)
	   5 - access("T2"."ID"="T1"."ID")
	   6 - filter("T1"."N_1000"=1)
	
	Note
	-----
	   - dynamic statistics used: dynamic sampling (level=2)
	   - this is an adaptive plan
	
	25 rows selected.
	
	
	
-- Display plan old school method	
select id
, parent_id
, position
, depth
, level – 1 old_depth
, rpad(' ',level - 1) || operation || ' ' || lower(options) || ' ' || object_name			text_line
from plan_table
start with id = 0 
connect by  parent_id = prior id
order siblings by
id, position
;


Sample of old school plan:

	  Id  Par  Pos DEPTH OLD_DEPTH TEXT_LINE
	---- ---- ---- ----- --------- --------------------------------------------------
		0        22     0         0 SELECT STATEMENT
		1    0    1     1         1  HASH JOIN
		2    1    1     2         2   TABLE ACCESS by index rowid T1
		3    2    1     3         3    INDEX range scan T1_I1
		4    1    2     2         2   TABLE ACCESS by index rowid T2
		5    4    1     3         3    INDEX range scan T2_I1
	
	


